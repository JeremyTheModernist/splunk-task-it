[{"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/index.js":"1","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/App.js":"2","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/reportWebVitals.js":"3","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Button.js":"4","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Signup.js":"5","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/SignupForm/index.js":"6","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Login.js":"7","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/LoginForm/index.js":"8","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Hooks/index.js":"9","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Hooks/useFetch.js":"10","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Home.js":"11","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Nav.js":"12","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Profile.js":"13","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/authorized/AuthorizedRoute.jsx":"14","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/PageWrapper.jsx":"15","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/index.js":"16","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Unauthorized.jsx":"17","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/AddTodo.jsx":"18","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/GetTodos.jsx":"19","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/TodoItem.jsx":"20","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/CompleteTodo.jsx":"21","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/TodoWrapper.js":"22"},{"size":812,"mtime":1611162502132,"results":"23","hashOfConfig":"24"},{"size":859,"mtime":1610489582158,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1610454968079,"results":"26","hashOfConfig":"24"},{"size":1042,"mtime":1611089951780,"results":"27","hashOfConfig":"24"},{"size":447,"mtime":1610730352192,"results":"28","hashOfConfig":"24"},{"size":3399,"mtime":1610720649995,"results":"29","hashOfConfig":"24"},{"size":440,"mtime":1610730336363,"results":"30","hashOfConfig":"24"},{"size":4374,"mtime":1611092988323,"results":"31","hashOfConfig":"24"},{"size":28,"mtime":1610460680371,"results":"32","hashOfConfig":"24"},{"size":2192,"mtime":1610720679201,"results":"33","hashOfConfig":"24"},{"size":1117,"mtime":1610730341491,"results":"34","hashOfConfig":"24"},{"size":1486,"mtime":1610492312955,"results":"35","hashOfConfig":"24"},{"size":798,"mtime":1610909146805,"results":"36","hashOfConfig":"24"},{"size":440,"mtime":1610490391703,"results":"37","hashOfConfig":"24"},{"size":681,"mtime":1610899346032,"results":"38","hashOfConfig":"24"},{"size":62,"mtime":1610895747624,"results":"39","hashOfConfig":"24"},{"size":440,"mtime":1610730357282,"results":"40","hashOfConfig":"24"},{"size":3251,"mtime":1610913493544,"results":"41","hashOfConfig":"24"},{"size":1828,"mtime":1611163645167,"results":"42","hashOfConfig":"24"},{"size":1294,"mtime":1610905817841,"results":"43","hashOfConfig":"24"},{"size":1435,"mtime":1610907148006,"results":"44","hashOfConfig":"24"},{"size":1484,"mtime":1610913847720,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"134s14t",{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"49"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"49"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"49"},"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/index.js",["101"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport LogRocket from \"logrocket\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { PageWrapper, TodoWrapper } from \"./state\";\n\n// LogRocket.init(\"zc2cw6/my-todo-app-dev\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <PageWrapper>\n        <TodoWrapper>\n          <App />\n        </TodoWrapper>\n      </PageWrapper>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["102","103"],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/App.js",["104","105"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Form from \"./components/SignupForm\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Home from \"./pages/Home\";\nimport Profile from \"./pages/Profile\";\nimport Nav from \"./components/Nav\";\nimport AuthorizedRoute from \"./authorized/AuthorizedRoute\";\n\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/signup\">\n            <Signup />\n          </Route>\n          <Route path=\"/login\">\n            <Login />\n          </Route>\n          <AuthorizedRoute path=\"/profile\">\n            <Profile />\n          </AuthorizedRoute>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/reportWebVitals.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Button.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Signup.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/SignupForm/index.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Login.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/LoginForm/index.js",["106","107"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport LogRocket from \"logrocket\";\nimport Button from \"../Button\";\nimport { useFetch } from \"../Hooks/index\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppState } from \"../../state\";\n\nconst StyledForm = styled.form`\n  max-width: 50%;\n  margin: auto;\n  display: flex;\n  flex-flow: row wrap;\n`;\n\nconst InputContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: column wrap;\n  text-align: left;\n  label {\n    margin-bottom: var(--padding-normal);\n    font-size: var(--type-large);\n  }\n  input {\n    background-color: var(--gray-9);\n    color: var(--white);\n    font-size: var(--type-normal);\n    width: 100%;\n    border: 1px solid rgba(0, 0, 0, 0);\n    box-sizing: border-box;\n    padding: var(--padding-normal);\n    border-radius: var(--border-normal);\n    ::placeholder {\n      color: var(--gray-4);\n    }\n    transition: 0.15s ease-in-out;\n    :hover {\n      transition: 0.15s ease-in-out;\n      border-color: var(--gray-6);\n    }\n  }\n  align-items: flex-start;\n  margin-bottom: var(--padding-large);\n`;\n\nconst Error = styled.div`\n  background-color: var(--error-transparent-color);\n  color: var(--white);\n  border-radius: var(--border-normal);\n  padding: var(--padding-small);\n  font-size: var(--type-normal);\n  width: 100%;\n  margin-bottom: var(--padding-large);\n`;\n\nconst Success = styled.div`\n  background-color: var(--secondary-color);\n  color: var(--white);\n  border-radius: var(--border-normal);\n  padding: var(--padding-small);\n  font-size: var(--type-normal);\n  width: 100%;\n  margin-bottom: var(--padding-large);\n`;\n\nconst SignupForm = () => {\n  const [formData, setFormData] = useState({\n    username: null,\n    password: null,\n  });\n\n  const { execute, data, isError } = useFetch(\n    () =>\n      fetch(\"http://localhost:3002/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      }),\n    false\n  );\n\n  const { setIsAuthorized, setUser, user } = useAppState();\n  const history = useHistory();\n  // update application state once a user logs in\n  // if either the data or the iserror is set, then set authorization\n  // basically when I make the API call, I will get a response that contains info about wether I'm authorized or not\n  useEffect(() => {\n    setIsAuthorized((prevState) => {\n      // only sets these values if they are readily available\n      // otherwise just return the current authorization state\n      return data?.authorized || isError?.authorized || prevState;\n    });\n    // set the user\n    setUser((prevUser) => {\n      return {\n        id: data?.id || prevUser?.id,\n        name: data?.name || prevUser?.name,\n        username: data?.username || prevUser?.username,\n      };\n    });\n    // push user to profile page if logged in\n    if (data?.authorized) {\n      // once a user is authorized, then log their name in the session\n      LogRocket.identify(data?.id, {\n        name: data?.name,\n        username: data?.username,\n      });\n      history.push(\"/profile\");\n    }\n  }, [data, isError]);\n\n  const handleFormInput = (e) => {\n    let formData = {};\n    formData[e.target.name] = e.target.value;\n    setFormData((prevState) => {\n      return {\n        ...prevState,\n        ...formData,\n      };\n    });\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    execute();\n  };\n  return (\n    <StyledForm onSubmit={handleFormSubmit}>\n      {isError && !data && <Error>{isError.message}</Error>}\n      {data && !isError && (\n        <Success>\n          {formData.firstname} you have successfully signed up for taskit!\n        </Success>\n      )}\n      <InputContainer>\n        <label htmlFor=\"username\">Username</label>\n        <input\n          type=\"text\"\n          name=\"username\"\n          id=\"username\"\n          placeholder=\"Provide a username\"\n          onChange={handleFormInput}\n        />\n      </InputContainer>\n      <InputContainer>\n        <label htmlFor=\"password\">Password</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          id=\"password\"\n          placeholder=\"Provide a password\"\n          onChange={handleFormInput}\n        />\n      </InputContainer>\n      <Button type=\"submit\">Login</Button>\n    </StyledForm>\n  );\n};\n\nexport default SignupForm;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Hooks/index.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Hooks/useFetch.js",["108"],"import { useState, useCallback, useEffect } from \"react\";\n\n// a fetch function that handles status including errors and loading and mounting\n// recieves any fetch function as an input\n// it handles the response\nexport const useFetch = (fetchFunction = () => {}, immediate = true) => {\n  const [data, setData] = useState(null);\n  const [isMounted, setIsMounted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(null);\n\n  // useMemo memorizes the output and keeps you from needing to recalculate it.\n\n  // useCallback keeps you from needing to recreate the same function object on\n  // each rerender\n\n  // only recalculate function definition if the fetchFunction changes:\n  const execute = useCallback(() => {\n    setIsMounted(true);\n    setIsError(false);\n    setIsLoading(true);\n    const makeRequest = async () => {\n      try {\n        const response = await fetchFunction();\n        const parseData = await response.json();\n        // check to see if you get a successfull response status from server.\n        // if you get a 400 or 500, for example then the response will ok will be false, and you should throw an error\n        if (!response.ok) {\n          console.log(\"RESPONSE IS OKAY?\", response.ok);\n          console.log(\"PARSED DATA\", parseData);\n          // it will pass this data along as the error to the catch statement\n          throw parseData;\n        }\n        // console.log(\"parsing that data\", parseData);\n        setData(parseData);\n      } catch (error) {\n        // here I know that the parsed data will have a message attribute so I can use that\n        // but what if I could just return an object?, so it's more adaptable, and then I pull message off of the object\n        // which is what I do now in the form\n        setIsError(error);\n      }\n      setIsLoading(false);\n    };\n    makeRequest();\n  }, [fetchFunction]);\n\n  // only call this function when the value of immediate changes\n  // if immediate is true, then it will run on the initial mount\n  useEffect(() => {\n    if (immediate) {\n      execute();\n    }\n  }, [immediate]);\n\n  return { execute, isMounted, isLoading, isError, data };\n};\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Home.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Nav.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Profile.js",["109"],"import React from \"react\";\n\nimport styled from \"styled-components\";\nimport AddTodo from \"../components/Todos/AddTodo\";\nimport GetTodos from \"../components/Todos/GetTodos\";\nimport { useAppState, useTodoState } from \"../state\";\n\nconst PageWrapper = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  margin: auto;\n  margin-top: var(--padding-xxlarge);\n  min-height: 80vh;\n`;\n\nconst Profile = () => {\n  const { user } = useAppState();\n  // const {} = useTodoState();\n  console.log(\"WHAT USER AM I GETTING?\", user);\n  return (\n    <PageWrapper>\n      <div>\n        <h1>\n          <span role=\"img\">🎉</span> Welcome back, {user?.name || \"partner\"}\n        </h1>\n        <AddTodo />\n        <GetTodos />\n      </div>\n    </PageWrapper>\n  );\n};\n\nexport default Profile;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/authorized/AuthorizedRoute.jsx",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/PageWrapper.jsx",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/index.js",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/pages/Unauthorized.jsx",[],"/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/AddTodo.jsx",["110","111"],"import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Button from \"../Button\";\nimport { useFetch } from \"../Hooks/index\";\nimport { useAppState, useTodoState } from \"../../state\";\n\nconst StyledForm = styled.form`\n  max-width: 50%;\n  margin: auto;\n  display: flex;\n  flex-flow: row wrap;\n`;\n\nconst InputContainer = styled.div`\n  width: 100%;\n  display: flex;\n  flex-flow: column wrap;\n  text-align: left;\n  label {\n    margin-bottom: var(--padding-normal);\n    font-size: var(--type-large);\n  }\n  input {\n    background-color: var(--gray-9);\n    color: var(--white);\n    font-size: var(--type-normal);\n    width: 100%;\n    border: 1px solid rgba(0, 0, 0, 0);\n    box-sizing: border-box;\n    padding: var(--padding-normal);\n    border-radius: var(--border-normal);\n    ::placeholder {\n      color: var(--gray-4);\n    }\n    transition: 0.15s ease-in-out;\n    :hover {\n      transition: 0.15s ease-in-out;\n      border-color: var(--gray-6);\n    }\n  }\n  align-items: flex-start;\n  margin-bottom: var(--padding-large);\n`;\n\nconst Error = styled.div`\n  background-color: var(--error-transparent-color);\n  color: var(--white);\n  border-radius: var(--border-normal);\n  padding: var(--padding-small);\n  font-size: var(--type-normal);\n  width: 100%;\n  margin-bottom: var(--padding-large);\n`;\n\nconst Success = styled.div`\n  background-color: var(--secondary-color);\n  color: var(--white);\n  border-radius: var(--border-normal);\n  padding: var(--padding-small);\n  font-size: var(--type-normal);\n  width: 100%;\n  margin-bottom: var(--padding-large);\n`;\n\nconst AddTodo = () => {\n  // get the id from the app state\n  const { user } = useAppState();\n  const { todos, addTodo } = useTodoState();\n  const { execute, data, isError } = useFetch(\n    () =>\n      fetch(\"http://localhost:3002/addtodo\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(formData),\n      }),\n    false\n  );\n  const [formData, setFormData] = useState({\n    userId: user.id,\n    username: user.username,\n    todo: null,\n  });\n  const handleFormInput = (e) => {\n    let formData = {};\n    formData[e.target.name] = e.target.value;\n    setFormData((prevState) => {\n      return {\n        ...prevState,\n        ...formData,\n      };\n    });\n  };\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    execute();\n  };\n  // here I can check to see if the data has updated, and only if it has, do I run this function\n  useEffect(\n    (prevState) => {\n      if (data) {\n        addTodo(data);\n      }\n    },\n    [data]\n  );\n  return (\n    <StyledForm onSubmit={handleFormSubmit}>\n      {isError && !data && <Error>{isError}</Error>}\n      {data && !isError && (\n        <Success>{formData.name} you have successfully added a todo.</Success>\n      )}\n      <InputContainer>\n        <label htmlFor=\"todo\">Add a todo</label>\n        <input\n          type=\"todo\"\n          name=\"todo\"\n          id=\"todo\"\n          placeholder=\"Create a new todo\"\n          onChange={handleFormInput}\n        />\n      </InputContainer>\n      <Button type=\"submit\" disabled={formData.todo ? false : true}>\n        Add Todo\n      </Button>\n    </StyledForm>\n  );\n};\n\nexport default AddTodo;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/GetTodos.jsx",["112","113","114","115","116"],"import React, { useState, useEffect } from \"react\";\nimport Button from \"../Button\";\nimport { useFetch } from \"../Hooks\";\n\nimport { useAppState, useTodoState } from \"../../state\";\n\nimport TodoItem from \"./TodoItem\";\nimport styled from \"styled-components\";\n\nconst TodoContainer = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  justify-content: center;\n  border-top: 1px solid var(--gray-7);\n  margin: var(--padding-normal);\n  margin-top: var(--padding-xxlarge);\n  margin-bottom: var(--padding-xxlarge);\n`;\n\nconst TitleWrapper = styled.div`\n  display: flex;\n  flex-flow: row nowrap;\n  align-items: center;\n  button {\n    margin-left: auto;\n    margin-right: 0;\n  }\n`;\n\nconst TodoItemWrapper = styled.div`\n  padding: 0;\n  margin-top: var(--padding-large);\n  list-style-type: none;\n`;\n\nconst GetTodos = () => {\n  console.log(\n    \"YOUR CURRENT URL\",\n    window.location.href,\n    window.location.pathname\n  );\n  const { todos, setInitialTodos } = useTodoState();\n  const { user } = useAppState();\n  const { execute, data, isError } = useFetch(\n    () =>\n      fetch(\"http://localhost:3002/gettodos\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ userId: user.id, username: user.username }),\n      }),\n    true\n  );\n  useEffect(() => {\n    setInitialTodos(data);\n  }, [data]);\n  return (\n    <TodoContainer>\n      <TitleWrapper>\n        <h3>\n          You have{\" \"}\n          {todos?.length === 1\n            ? `${todos?.length} todo`\n            : `${todos?.length} todos`}\n          :{\" \"}\n        </h3>\n      </TitleWrapper>\n      <TodoItemWrapper>\n        {todos?.map((todo) => {\n          return <TodoItem key={todo.todoId} todo={todo} />;\n        })}\n      </TodoItemWrapper>\n    </TodoContainer>\n  );\n};\n\nexport default GetTodos;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/TodoItem.jsx",["117","118","119","120"],"import React, { useState, useEffect } from \"react\";\nimport { useFetch } from \"../Hooks/index\";\nimport styled from \"styled-components\";\nimport CompleteTodo from \"./CompleteTodo\";\nimport { useTodoState } from \"../../state\";\n\nconst StyledTodo = styled.li`\n  width: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  box-sizing: border-box;\n  list-style-type: none;\n  padding: var(--padding-large);\n  margin-bottom: var(--padding-normal);\n  background-color: var(--gray-9);\n  border-radius: var(--border-normal);\n  font-weight: 500;\n  border: 1px solid rgba(0, 0, 0, 0);\n  cursor: pointer;\n  :hover {\n    transition: 0.15s ease-in-out;\n    border-color: var(--gray-6);\n  }\n`;\n\nconst Status = styled.span`\n  margin-left: auto;\n  margin-right: var(--padding-normal);\n  padding: var(--padding-small);\n  background-color: ${(props) =>\n    props.done ? \"var(--status-done)\" : \"var(--status-undone)\"};\n  /* color: var(--primary-color); */\n  font-weight: 500;\n  font-size: var(--type-normal);\n  border-radius: var(--border-normal);\n`;\n\nconst TodoItems = ({ todo }) => {\n  return (\n    <StyledTodo>\n      <p>{todo.todo}</p>\n      <Status done={todo.done}>{todo.done ? \"Done\" : \"Not Done\"}</Status>\n      <CompleteTodo todo={todo} />\n    </StyledTodo>\n  );\n};\n\nexport default TodoItems;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/components/Todos/CompleteTodo.jsx",["121","122","123"],"import React, { useState, useEffect } from \"react\";\nimport { useFetch } from \"../Hooks/index\";\nimport styled from \"styled-components\";\nimport { useTodoState } from \"../../state\";\n\nconst StyledButton = styled.button`\n  background-color: var(--brand-blue);\n  color: var(--black);\n  display: flex;\n  flex-flow: row;\n  justify-content: center;\n  font-size: var(--type-normal);\n  padding: var(--padding-small);\n  font-weight: 600;\n  border: none;\n  border-radius: var(--border-normal);\n  transition: 0.25s ease-in-out;\n  cursor: pointer;\n  :hover {\n    transition: 0.25s ease-in-out;\n    opacity: 0.8;\n  }\n`;\n\n// need to add logic on the backend to change the status of the todo\n// which means I also need to\nconst CompleteTodo = ({ todo }) => {\n  const { markTodoDone } = useTodoState();\n  const { execute, data, isError } = useFetch(\n    () =>\n      fetch(\"http://localhost:3002/updatetodo\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ todoId: todo.todoId }),\n      }),\n    false\n  );\n  const updateServerTodo = (e) => {\n    execute();\n  };\n  // if data exists, and has changed via a server call, then update my local todo state\n  useEffect(() => {\n    if (data) {\n      markTodoDone(data);\n    }\n  }, [data]);\n  return (\n    <>\n      <StyledButton onClick={updateServerTodo}>Mark as Done</StyledButton>\n    </>\n  );\n};\n\nexport default CompleteTodo;\n","/Users/jbarnes/Desktop/code/splunk-hec-projects/simple-express-app/frontend/src/state/TodoWrapper.js",["124"],"import React, { useState, useContext, createContext, useEffect } from \"react\";\n\nconst TodoContext = createContext({\n  todos: [],\n  setInitialTodos: () => {},\n  addTodo: () => {},\n  markTodoDone: () => {},\n});\n\nconst initialState = [];\n\nexport const TodoWrapper = ({ children }) => {\n  const [todos, setTodos] = useState(initialState);\n\n  const addTodo = (newTodo) => {\n    setTodos((prevTodos) => {\n      if (prevTodos) {\n        return [newTodo, ...prevTodos];\n      }\n      return [newTodo];\n    });\n  };\n  const markTodoDone = (updatedTodo) => {\n    setTodos((prevTodos) => {\n      let todoIndex = prevTodos.findIndex(\n        (todo) => todo.todoId === updatedTodo.todoId\n      );\n      let newArray = [...prevTodos];\n      newArray[todoIndex] = updatedTodo;\n      return [...newArray];\n    });\n  };\n  // this allows me to fetch some server todos and add them here\n  // this will update all of my todos everytime this function runs to be in sync with my server todos\n  const setInitialTodos = (serverTodos = []) => {\n    setTodos((prevState) => {\n      if (serverTodos) {\n        // todos come back and display by first added. we want the first one to be the most recently added.\n        return [...serverTodos.reverse()];\n      }\n      return [];\n    });\n  };\n  return (\n    <TodoContext.Provider\n      value={{ todos, setInitialTodos, addTodo, markTodoDone }}\n    >\n      {children}\n    </TodoContext.Provider>\n  );\n};\n\nexport const useTodoState = () => useContext(TodoContext);\n",{"ruleId":"125","severity":1,"message":"126","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":17},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"125","severity":1,"message":"133","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":12},{"ruleId":"125","severity":1,"message":"134","line":3,"column":8,"nodeType":"127","messageId":"128","endLine":3,"endColumn":12},{"ruleId":"125","severity":1,"message":"135","line":85,"column":37,"nodeType":"127","messageId":"128","endLine":85,"endColumn":41},{"ruleId":"136","severity":1,"message":"137","line":113,"column":6,"nodeType":"138","endLine":113,"endColumn":21,"suggestions":"139"},{"ruleId":"136","severity":1,"message":"140","line":53,"column":6,"nodeType":"138","endLine":53,"endColumn":17,"suggestions":"141"},{"ruleId":"125","severity":1,"message":"142","line":6,"column":23,"nodeType":"127","messageId":"128","endLine":6,"endColumn":35},{"ruleId":"125","severity":1,"message":"143","line":68,"column":11,"nodeType":"127","messageId":"128","endLine":68,"endColumn":16},{"ruleId":"136","severity":1,"message":"144","line":106,"column":5,"nodeType":"138","endLine":106,"endColumn":11,"suggestions":"145"},{"ruleId":"125","severity":1,"message":"146","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"147","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":14},{"ruleId":"125","severity":1,"message":"148","line":44,"column":11,"nodeType":"127","messageId":"128","endLine":44,"endColumn":18},{"ruleId":"125","severity":1,"message":"149","line":44,"column":26,"nodeType":"127","messageId":"128","endLine":44,"endColumn":33},{"ruleId":"136","severity":1,"message":"150","line":57,"column":6,"nodeType":"138","endLine":57,"endColumn":12,"suggestions":"151"},{"ruleId":"125","severity":1,"message":"146","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"152","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"153","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":18},{"ruleId":"125","severity":1,"message":"142","line":5,"column":10,"nodeType":"127","messageId":"128","endLine":5,"endColumn":22},{"ruleId":"125","severity":1,"message":"146","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"149","line":29,"column":26,"nodeType":"127","messageId":"128","endLine":29,"endColumn":33},{"ruleId":"136","severity":1,"message":"154","line":48,"column":6,"nodeType":"138","endLine":48,"endColumn":12,"suggestions":"155"},{"ruleId":"125","severity":1,"message":"152","line":1,"column":54,"nodeType":"127","messageId":"128","endLine":1,"endColumn":63},"no-unused-vars","'LogRocket' is defined but never used.","Identifier","unusedVar","no-native-reassign",["156"],"no-negated-in-lhs",["157"],"'logo' is defined but never used.","'Form' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'setIsAuthorized', and 'setUser'. Either include them or remove the dependency array.","ArrayExpression",["158"],"React Hook useEffect has a missing dependency: 'execute'. Either include it or remove the dependency array.",["159"],"'useTodoState' is defined but never used.","'todos' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addTodo'. Either include it or remove the dependency array.",["160"],"'useState' is defined but never used.","'Button' is defined but never used.","'execute' is assigned a value but never used.","'isError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setInitialTodos'. Either include it or remove the dependency array.",["161"],"'useEffect' is defined but never used.","'useFetch' is defined but never used.","React Hook useEffect has a missing dependency: 'markTodoDone'. Either include it or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [data, history, isError, setIsAuthorized, setUser]",{"range":"173","text":"174"},"Update the dependencies array to be: [execute, immediate]",{"range":"175","text":"176"},"Update the dependencies array to be: [addTodo, data]",{"range":"177","text":"178"},"Update the dependencies array to be: [data, setInitialTodos]",{"range":"179","text":"180"},"Update the dependencies array to be: [data, markTodoDone]",{"range":"181","text":"182"},[3137,3152],"[data, history, isError, setIsAuthorized, setUser]",[2115,2126],"[execute, immediate]",[2595,2601],"[addTodo, data]",[1359,1365],"[data, setInitialTodos]",[1287,1293],"[data, markTodoDone]"]